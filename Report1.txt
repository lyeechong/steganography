Programming Assignment #1 - Image Manipulation
Lyee Chong
UTEID: lsc568
September 2, 2011
Professor: Calvin Lin
Course: C S 314H
Unique course number: 52318

Report on assignment #1
	The assignment is to create a program that could apply effects to an image, manipulating it, given two prewritten pieces of code and one file to write my classes in. (The files JIP.java and ImageEffect.java are not of my work, but were provided to me, prewritten. Only the Transformations.java file is of my work as well as this report) My goal in the assignment is to learn more about image manipulation and programming in general. But I also learned a lot more through fiddling around with the programs in this assignment and completing them; I now have an idea of how grey scale works in image editors, and experience writing a report over a programming assignment.
	When deciding on the algorithms I would use to program the solutions, I made the assumption that the image would be rectangular in nature, have a positive number of pixels, and that the other provided tester classes functioned well with little error.
	The solution I utilized for removing the various colors (red, green and blue) was to set the RGB value of the corresponding color to zero, but retain the other two color's values in the pixel. I accomplished this by making a new pixel with the specified characteristics to replace the one at that spot in the matrix, running through the entire matrix and applying the effect.
For the effects like "RedOnlyEffect" and the counterpart effects for blue and green, I preserved the color value which was to be left behind, and set the other two values to zero in the new pixel I made to replace the one at that spot in the matrix.
To make the image black and white, I decided that a grey-scale way was feasible and attempted the task. I programmed the function to grab the red, blue, and green values of each pixel and then average them together, then set the red, green, and blue values of the replacement pixel to the average. The successful result was various shades of grey depending on the original intensity of the colors in the pixel.
For the reflection effects, I decided to swap the opposite pixel with the one I was on in the matrix and repeat for all the pixels. For example, for the VerticalReflect effect, I swapped the top left pixel with the top right pixel, and repeated for all pixels on the left half, swapping them with their opposite on the right half. This method only required that I go through half of the matrix with the nested loops, with the intention of being more efficient than going through the entire matrix.  I used the same technique for the HorizontalReflect effect, just swapping the top and bottom pixels with each other instead of the left and right.
For the Grow effect, I made a new matrix to store the new pixels in which is twice the height and width of the original picture's matrix. Then going through each pixel of the original image, I mapped the same value of the original image's pixel to four pixels in the new matrix and returned the new matrix.
For the shrink effect, I took the color values for four pixels next to each other and averaged the corresponding values, reds to red, greens to green, and blues to blue. Then I made one new pixel, using the average color values gained from each of the four pixels and placed it into the new matrix, effectively shrinking the image.
And as for the threshold effect, I got the threshold value passed from the arguments, then went through the pixel matrix one by one and got the individual red, blue, and green values. If a value was larger or equal to the threshold, then I increased the intensity of that color to 255, if it was lower, then it is decreased to zero. Doing this reduced the number of colors in the picture to eight.
	I tested my software using the various images included in the files given, and also created a few of my own files. A few of the images I created were a few pixels wide and high, to better test and see the HorizontalReflect and VerticalReflect effects flipping of the middle pixels. Also I didn't test all the effects using all the images, but selected a few to better test each effect, like a color picture for the BlackAndWhite effect, and a picture which I could distinctly see if the red was removed from it for the NoRed effect. With the tests I have conducted, I have found my solutions to be suitable and well for their intended effects. I produced two interesting images, for image Test1.jpg, I used the following in this order: NoGreen, InvertEffect, and VerticalReflect. For Test2.jpg, I only used the NoBlue effect.
	While writing the effects in the program, I noticed that the given InvertEffect was incorrect in that it labeled the height as the width, and the width as the height.
The interesting test images mentioned in this report can be found here:
http://www.2shared.com/file/OGGtfqpb/Images_beforeAndAfter.html
